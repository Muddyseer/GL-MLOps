name: Trigger Azure ML Pipeline
on: [push, workflow_dispatch]

jobs:
  trigger-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Trigger Azure ML Pipeline
        run: |
          pip install azure-ai-ml
          python - <<EOF
          from azure.ai.ml import MLClient, Input
          from azure.identity import DefaultAzureCredential

          # Initialize MLClient
          ml_client = MLClient(
              DefaultAzureCredential(),
              subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              resource_group_name="${{ secrets.AZURE_RESOURCE_GROUP }}",
              workspace_name="${{ secrets.AZURE_WORKSPACE }}",
          )

          # Define pipeline (replace with your actual components)
          @pipeline(compute="cpu-cluster")
          def car_price_pipeline(input_data):
              preprocess = ml_client.components.get("step_process")(data=input_data)
              train = ml_client.components.get("train_step")(
                  train_data=preprocess.outputs.train_data,
                  test_data=preprocess.outputs.test_data,
                  n_estimators=50,  # Default value (sweep will override)
                  max_depth=10      # Default value (sweep will override)
              )
              sweep = train.sweep(
                  primary_metric="MSE",
                  goal="Minimize",
                  sampling_algorithm="random",
                  compute="cpu-cluster",
              )
              sweep.set_limits(max_total_trials=20, max_concurrent_trials=10, timeout=7200)
              return {"model": sweep.outputs.model_output}

          # Submit pipeline
          pipeline_job = car_price_pipeline(
              input_data=Input(path="${{ secrets.AZURE_DATA_PATH }}")  # Set this secret to your data URI
          )
          ml_client.jobs.create_or_update(pipeline_job)
          print(f"Pipeline triggered! Job ID: {pipeline_job.name}")
          EOF
